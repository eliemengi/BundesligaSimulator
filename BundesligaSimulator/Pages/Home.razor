@page "/"
@using System.Net.Http.Json
@inject HttpClient Http

<div class="apple">
    <header class="hero">
        <h1>Bundesliga Simulation</h1>
        <p class="sub">Wähle einen Modus und stell deine Simulation zusammen.</p>
    </header>

    <!-- Segmented Control -->
    <div class="segment">
        <button class="@GetSegClass(Mode.Single)" @onclick="() => current = Mode.Single">Einzelspiel</button>
        <button class="@GetSegClass(Mode.Season)" @onclick="() => current = Mode.Season">Komplette Saison</button>
    </div>

    @if (current == Mode.Single)
    {
        <!-- CARD: Einzelspiel -->
        <section class="card">
            <h2>Einzelspiel simulieren</h2>

            <div class="grid">
                <!-- Team A -->
                <div class="form-row">
                    <label>Team A</label>
                    <select @bind="TeamA" disabled="@(teamsLoading || teams.Count == 0)">
                        <option value="">— wählen —</option>
                        @foreach (var t in teams)
                        {
                            <option value="@t">@t</option>
                        }
                    </select>
                    @if (teamsLoading)
                    {
                        <small class="result">Lade Teams …</small>
                    }
                    else if (!string.IsNullOrEmpty(teamsError))
                    {
                        <small class="result error">@teamsError</small>
                    }
                </div>

                <!-- Team B -->
                <div class="form-row">
                    <label>Team B</label>
                    <select @bind="TeamB" disabled="@(teamsLoading || teams.Count == 0)">
                        <option value="">— wählen —</option>
                        @foreach (var t in teams)
                        {
                            <option value="@t">@t</option>
                        }
                    </select>
                    @if (teamsLoading)
                    {
                        <small class="result">Lade Teams …</small>
                    }
                    else if (!string.IsNullOrEmpty(teamsError))
                    {
                        <small class="result2 error">@teamsError</small>
                    }
                </div>

                <!-- Spielort -->
                <div class="form-row">
                    <label>Spielort</label>
                    <div class="pill-group">
                        <button type="button" class="@GetPillClass(venue == Venue.Home)" @onclick="() => venue = Venue.Home">Team A (Heim)</button>
                        <button type="button" class="@GetPillClass(venue == Venue.Away)" @onclick="() => venue = Venue.Away">Team B (Heim)</button>
                        <button type="button" class="@GetPillClass(venue == Venue.Neutral)" @onclick="() => venue = Venue.Neutral">Neutral</button>
                    </div>
                </div>
            </div>

            <div class="actions">
                <button class="primary" @onclick="LoadH2Async">Simulation starten</button>
            </div>

            @if (isLoadingH2H || !string.IsNullOrWhiteSpace(h2hError) || lastH2H != null)
            {
                <section class="card">
                    <h2>Letztes Duell</h2>

                    @if (isLoadingH2H)
                    {
                        <p>Spiel wird geladen...</p>
                    }
                    else if (!string.IsNullOrWhiteSpace(h2hError))
                    {
                        <p class="error">@h2hError</p>
                    }
                    else if (lastH2H != null)
                    {
                        <p>
                            @lastH2H.Team1 @lastH2H.G1 - @lastH2H.G2 @lastH2H.Team2
                            (@lastH2H.DateLocal.ToShortDateString())
                        </p>
                    }
                </section>
            }

            @if (!string.IsNullOrWhiteSpace(ResultSingle))
            {
                <div class="result">@ResultSingle</div>
            }
        </section>

       
    }
    else
    {
        <!-- CARD: Saison -->
        <section class="card">
            <h2>Komplette Saison simulieren</h2>

            <div class="grid">
                <!-- Wettbewerb (liefert API-Shortcut als value) -->
                <div class="form-row">
                    <label>Wettbewerb</label>
                    <select @bind="League">
                        <option value="bl1">Bundesliga (1)</option>
                        <option value="bl2" disabled>2. Bundesliga (bald)</option>
                    </select>
                </div>

                <!-- Saison -->
                <div class="form-row">
                    <label>Saison</label>
                    <select @bind="Season">
                        <option>2025/26</option>
                        <option>2024/25</option>
                    </select>
                </div>

                <!-- Runden -->
                <div class="form-row">
                    <label>Runden</label>
                    <div class="pill-group">
                        <button type="button" class="@GetPillClass(rounds==Rounds.HinRueck)" @onclick="() => rounds = Rounds.HinRueck">Hin &amp; Rückrunde</button>
                        <button type="button" class="@GetPillClass(rounds==Rounds.NurHin)" @onclick="() => rounds = Rounds.NurHin">Nur Hinrunde</button>
                    </div>
                </div>

                <!-- Simulationen -->
                <div class="form-row">
                    <label>Simulationen</label>
                    <input type="number" min="1" max="50000" step="1" @bind="Simulations" />
                    <small>Nur UI – Logik kommt später.</small>
                </div>
            </div>

            <div class="actions">
                <button class="primary" @onclick="LoadTableAsync">Saison simulieren</button>
            </div>

            @if (!string.IsNullOrWhiteSpace(ResultSeason))
            {
                <div class="result">@ResultSeason</div>
            }
            @if (!string.IsNullOrWhiteSpace(ResultSeason2))
            {
                <div class="result">@ResultSeason2</div>
            }
        </section>

        @* Nur anzeigen, wenn wir wirklich laden/geladen/Fehler haben *@
        @if (tableLoading || !string.IsNullOrWhiteSpace(tableError) || table.Any())
        {
            <section class="card">
                <h2>Saison Output</h2>

                <div class="standings-wrap">
                    <table class="standings-table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Verein</th>
                                <th>Sp</th>
                                <th>S</th>
                                <th>U</th>
                                <th>N</th>
                                <th>GT</th>
                                <th>TD</th>
                                <th>Pk</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in table)
                            {
                                var played = row.Won + row.Draw + row.Lost;
                                var gd = row.Goals - row.OpponentGoals;
                                teamIcons.TryGetValue(row.TeamName, out var iconUrl);

                                <tr>
                                    <td class="rank">@row.Rank</td>
                                    <td class="club">
                                        @if (!string.IsNullOrWhiteSpace(iconUrl))
                                        {
                                            <img class="crest" src="@iconUrl" alt="" width="22" height="22" loading="lazy" />

                                        }
                                        <span class="club-name">@row.TeamName</span>
                                    </td>
                                    <td>@played</td>
                                    <td>@row.Won</td>
                                    <td>@row.Draw</td>
                                    <td>@row.Lost</td>
                                    <td>@row.Goals:@row.OpponentGoals</td>
                                    <td class="gd @(gd > 0 ? "pos" : gd < 0 ? "neg" : "neu")">@gd</td>
                                    <td><span class="pts">@row.Points</span></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </section>

            
        }




    }
</div>



@code {

    public class OlTeam{
        public int TeamId{ get; set; }
        public string TeamName { get; set; } = "";
        public string? ShortName { get; set; }
        public string? TeamIconUrl { get; set; }
    }

    enum Mode { Single, Season }
    enum Venue { Home, Away, Neutral }
    enum Rounds { HinRueck, NurHin }

    Mode current = Mode.Single;

    // Placeholder-Daten später via API

    List<string> teams = new();
    bool teamsLoading = false;
    string? teamsError;


    private string _teamA;
    private string _teamB;

    public string TeamA { get { return _teamA; } set { if (string.IsNullOrWhiteSpace(value)) throw new ArgumentException("Bitte Team auswählen"); _teamA = value; } }
    public string TeamB { get { return _teamB; } set { if (string.IsNullOrWhiteSpace(value)) throw new ArgumentException("Bitte Team auswählen"); _teamB = value; } }

    Venue venue = Venue.Home;
    private string _resultSingle = string.Empty;
    public string ResultSingle { get => _resultSingle; private set => _resultSingle = value; }

    private string _league;
    public string League
    {
        get { return _league; }
        set
        {
            _league = value;
            leagueShortcut = value; // direkt Shortcut setzen
            TryLoadTeams();
        }
    }

    string leagueShortcut;
    private string _season;
    public string Season { get { return _season; } set { if (string.IsNullOrWhiteSpace(value)) throw new ArgumentException("Bitte Saison Auswaählen"); _season = value; /*leagueShortcut = "bl1";*/ TryLoadTeams(); } }

    private async void TryLoadTeams()
    {
        if (!string.IsNullOrWhiteSpace(leagueShortcut) && !string.IsNullOrWhiteSpace(_season))
        {
            await LoadTeamsAsync();
        }
    }

    Rounds rounds = Rounds.HinRueck;
    private int _simulations;
    public int Simulations { get { return _simulations; } set { _simulations = value; } }

    private string _resultSeason = string.Empty;
    public string ResultSeason { get => _resultSeason; private set => _resultSeason = value; }

    private string _resultSeason2 = string.Empty;
    public string ResultSeason2 { get => _resultSeason2; private set => _resultSeason2 = value; }

    /*private string _resultSeason2 = string.Empty;
    public string ResultSeason2 { get => _resultSeason2; private set => _resultSeason2 = value; }*/

    string GetSegClass(Mode m) => $"seg-btn {(current == m ? "active" : "")}";
    string GetPillClass(bool active) => $"pill {(active ? "active" : "")}";


    static string ToSeasonYear(string seasonLabel){
        var parts = seasonLabel.Split('/');
        if (parts.Length > 0)
        {
            parts[0].Trim();
        }
        return
            seasonLabel.Trim();
    }

    async Task LoadTeamsAsync()
    {
        try
        {
            teamsLoading = true;
            teamsError = null;


            var seasonYear = Season.Split('/')[0]; // nur erstes Jahr, zB 2024
            var url = $"https://api.openligadb.de/getavailableteams/{leagueShortcut}/{seasonYear}";

            var data = await Http.GetFromJsonAsync<List<OlTeam>>(url);
            teams = (data ?? new()).Select(t => t.TeamName).OrderBy(n => n).ToList();
            teamIcons = (data ?? new()).ToDictionary(t => t.TeamName, t => t.TeamIconUrl);

            if (!string.IsNullOrEmpty(TeamA) && !teams.Contains(TeamA)) TeamA = "";
            if (!string.IsNullOrEmpty(TeamB) && !teams.Contains(TeamB)) TeamB = "";
        }
        catch (Exception ex)
        {
            teamsError = "Teams konnte nicht geladen werden";
            Console.WriteLine(ex);
        }
        finally
        {
            teamsLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync(){
        League = "bl1";
        Season = "2025/26";
        await LoadTeamsAsync();
    } 


    class MatchProps
    {
        private string _league;
        private string _seasonLabel;
        private int _seasonYear;
        private string _homeTeam;
        private string _awayTeam;
        private int _matchDay;

        public string League { get => _league;}
        public string SeasonLabel { get => _seasonLabel; }
        public int SeasonYear { get => _seasonYear; }
        public string HomeTeam { get => _homeTeam; }
        public string AwayTeam { get => _awayTeam; }
        public DateTime KickOff { get; set; } // Standardmäßig UTC, kann aber angepasst werden
        public enum Venue { Home, Away, Neutral }
        public int MatchDay
        {
            get => _matchDay;
        } // Standardmäßig 1, kann angepasst werden

        public MatchProps(string league, string seasonLabel, int seasonYear, string homeTeam, string awayTeam,DateTime kickOff, int matchday)
        {
            if (string.IsNullOrWhiteSpace(league)) throw new ArgumentException("Bitte Liga auswählen");
            if (string.IsNullOrWhiteSpace(seasonLabel)) throw new ArgumentException("Bitte Saison auswählen");
            if (seasonYear <2006 || seasonYear >2027) throw new ArgumentException("Bitte gültiges Jahr auswählen");
            if (string.IsNullOrWhiteSpace(homeTeam)) throw new ArgumentException("Bitte Heimteam auswählen");
            if (string.IsNullOrWhiteSpace(awayTeam)) throw new ArgumentException("Bitte Auswärtsteam auswählen");
            if (homeTeam == awayTeam) throw new ArgumentException("Heim- und Auswärtsteam müssen unterschiedlich sein");
            if (matchday < 1 || matchday > 34) throw new ArgumentException("Bitte gültigen Spieltag wählen (1-34)");
            _league = league;
            _seasonLabel = seasonLabel;
            _seasonYear = seasonYear;
            _homeTeam = homeTeam;
            _awayTeam = awayTeam;
            _matchDay = matchday;
        }

    }
    //Aufbereitete, numerische Merkmale für das Modell aus MatchProps + API-Daten gebaut.
    class MatchFeatures
    {
        public double FormHome { get; set; }
        public double FormAway { get; set; }
        public double AttackHome { get; set; }
        public double AttackAway { get; set; }
        public double DefenseHome { get; set; }
        public double DefenseAway { get; set; }
        public double HomeAdvantage { get; set; }
        public int TableRankHome { get; set; } // Platz in Tabelle
        public int TableRankAway { get; set; }
        public int MatchDay { get; set; }      // Spieltag (1–34)

        public int WinsHome { get; set; }      // Saisonbilanzaus API berechnet
        public int WinsAway { get; set; }
        public int LossesHome { get; set; }
        public int LossesAway { get; set; }
        public int DrawsHome { get; set; }
        public int DrawsAway { get; set; }
    }
    public sealed class OlTableRow
    {
        public int Rank { get; set; }
        public string TeamName { get; set; } = "";
        public int Points { get; set; }
        public int Won { get; set; }
        public int Draw { get; set; }
        public int Lost { get; set; }
        public int Goals { get; set; }
        public int OpponentGoals { get; set; }

    }

    bool isLoadingH2H;
    string? h2hError;
    H2HView? lastH2H;
    List<H2HView> recentH2H = new();

    bool tableLoading;
    string? tableError;
    bool showFullTable;
    List<OlTableRow> table = new(); // deine OlTableRow hast du schon – passt

    List<OlTeam> teamsRaw = new();
    Dictionary<string, string?> teamsIcon = new();




    record H2HView(string Team1, string Team2, int G1, int G2, DateTime DateLocal, string? Icon1, string? Icon2);
    class MatchResultDto
    {
        public int resultTypeID { get; set; }
        public int pointsTeam1 { get; set; }
        public int pointsTeam2 { get; set; }
    }

    class TeamDto
    {
        public int TeamId { get; set; }
        public string TeamName { get; set; } = "";
        public string? TeamIconUrl { get; set; }
    }

    class MatchDto
    {
        public DateTime matchDateTimeUTC { get; set; }
        public bool MatchIsFinished { get; set; }
        public string leagueShortcut { get; set; }
        public int LeagueSeason { get; set; }
        public TeamDto Team1 { get; set; }
        public TeamDto Team2 { get; set; }
        public List<MatchResultDto> matchResults { get; set; } = new();
    }



    Dictionary<string, string?> teamIcons = new();

    private async Task LoadTableAsync(){
        tableError = null;
        tableLoading = true;
        table.Clear();

        try{
            var seasonYear = Season.Split("/")[0]; // 2025 wird zu 2025/26
            var url = $"https://api.openligadb.de/getbltable/{leagueShortcut}/{seasonYear}";
            var rows = await Http.GetFromJsonAsync<List<OlTableRow>>(url) ?? new();
            table = rows.OrderBy(r => r.Rank).ToList();
        }

        catch(Exception ex){
            Console.WriteLine(ex);
            tableError = "Tabelle konnte nicht geladen werden";
        }
        finally{
            tableLoading = false;
            StateHasChanged();

        }

    }

    async Task LoadTeamsAsync2()
    {
        teamsError = null;
        teamsLoading = true;
        teams.Clear();

        try
        {
            var seasonYear = Season.Split("/")[0]; // 2025 wird zu 2025/26
            var url = $"https://api.openligadb.de/getavailableteams/{leagueShortcut}/{seasonYear}";

            var data = await Http.GetFromJsonAsync<List<OlTeam>>(url) ?? new();
            teamsRaw = data;

            teams = data.Select(t => t.TeamName).OrderBy(n => n).ToList();
            teamsIcon = data.ToDictionary(t => t.TeamName, t => t.TeamIconUrl);


            if (!teams.Contains(TeamA)) TeamA = null;
            if (!teams.Contains(TeamA)) TeamA = null;
        }

        catch (Exception ex)
        {
            Console.WriteLine(ex);
            teamsError = "Teams konnte nicht geladen werden";
        }
        finally
        {
            teamsLoading = false;
            StateHasChanged();
        }
    }

    async Task LoadH2Async()
    {
        h2hError = null;
        isLoadingH2H = true;
        lastH2H = null;

        try
        {
            if (string.IsNullOrWhiteSpace(TeamA) || string.IsNullOrWhiteSpace(TeamB) || TeamA == TeamB)
            {
                teamsError = "Bitte 2 unterschiedliche Teams wählen";
                return;
            }

            var seasonYear = Season.Split("/")[0]; // 2025 wird zu 2025/26
            var url = $"https://api.openligadb.de/getmatchdata/{leagueShortcut}/{seasonYear}";
            var allMatches = await Http.GetFromJsonAsync<List<MatchDto>>(url) ?? new();

            var duelle = allMatches
    .Where(m =>
        m.MatchIsFinished && // nur beendete Spiele
        (
          (string.Equals(m.Team1.TeamName, TeamA, StringComparison.OrdinalIgnoreCase) &&
           string.Equals(m.Team2.TeamName, TeamB, StringComparison.OrdinalIgnoreCase))
          ||
          (string.Equals(m.Team1.TeamName, TeamB, StringComparison.OrdinalIgnoreCase) &&
           string.Equals(m.Team2.TeamName, TeamA, StringComparison.OrdinalIgnoreCase))
        )
    )
    .OrderByDescending(m => m.matchDateTimeUTC)
    .ToList();


            var match = duelle.FirstOrDefault();
            if (match == null)
            {
                h2hError = "Kein letztes spiel gefunden";
                return;
            }

            var fulltime = match.matchResults.FirstOrDefault(r => r.resultTypeID == 2);
            if (fulltime == null)
            {
                fulltime = match.matchResults.FirstOrDefault();
            }

            int g1;
            int g2;
            if (fulltime == null)
            {
                g1 = 0;
                g2 = 0;
            }
            else{
                g1 = fulltime.pointsTeam1;
                g2 = fulltime.pointsTeam2;
            }


            teamIcons.TryGetValue(match.Team1.TeamName ?? "", out var icon1);
            teamIcons.TryGetValue(match.Team2.TeamName ?? "", out var icon2);

            lastH2H = new H2HView(
                 match.Team1?.TeamName ?? "Team A",
                match.Team2?.TeamName ?? "Team B",
                 g1, g2,
                match.matchDateTimeUTC.ToLocalTime(),
                icon1, icon2
        );
        }

        catch (Exception ex)
        {
            Console.WriteLine(ex);
            h2hError = "Laden nicht möglich";
        }
        finally
        {
            isLoadingH2H = false;
            StateHasChanged();
        }

        }
    // bsp methoden
    void FakeRunSingle()
    {
        if (string.IsNullOrWhiteSpace(TeamA) || string.IsNullOrWhiteSpace(TeamB) || TeamA == TeamB)
        {
            ResultSingle = "Bitte zwei unterschiedliche Teams wählen.";
            return;
        }
        var ort = venue == Venue.Home ? "Team A (Heim)" : venue == Venue.Away ? "Team B (Heim)" : "neutral";
        ResultSingle = $"Simulation vorbereitet: {TeamA} vs {TeamB} – Ort: {ort}.";
    }

    void FakeRunSeason()
    {
        if (_simulations < 0 || _simulations > 50000)
        {
            ResultSeason = "Bitte wähle eine Zahl von 1-50.000";
        }
        else
        {
            ResultSeason2 = $"Simulation vorbereitet: {League} • {Season} • {rounds} • {Simulations:N0} Läufe.";
        }
    }
    
}
